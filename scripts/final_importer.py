#!/usr/bin/env python3
"""
TERRA Final Importer v3.0
Avec images locales styl√©es et descriptions riches
"""

import os
import json
import requests
import random
import time
from typing import List, Dict, Any
import glob

# Configuration
PAYLOAD_API_URL = "http://localhost:3000/api"
PAYLOAD_EMAIL = "admin@terra-sneakers.com"
PAYLOAD_PASSWORD = "TerraAdmin2024!"
PLACEHOLDER_DIR = "placeholder_images"

# Mat√©riaux √©coresponsables avec d√©tails
ECO_MATERIALS = [
    {"name": "Cuir Apple", "desc": "Cuir innovant fabriqu√© √† partir de d√©chets de pommes", "impact": "95% moins d'eau"},
    {"name": "Ocean Plastic", "desc": "Plastique recycl√© collect√© dans les oc√©ans", "impact": "5 bouteilles recycl√©es/paire"},
    {"name": "Coton Bio", "desc": "Coton cultiv√© sans pesticides ni produits chimiques", "impact": "60% moins d'eau"},
    {"name": "Caoutchouc naturel", "desc": "Latex d'h√©v√©a r√©colt√© de mani√®re durable", "impact": "Biod√©gradable √† 100%"},
    {"name": "Chanvre", "desc": "Fibre naturelle ultra-r√©sistante et √©cologique", "impact": "Croissance sans irrigation"},
    {"name": "Li√®ge", "desc": "√âcorce de ch√™ne-li√®ge r√©colt√©e sans abattre l'arbre", "impact": "R√©g√©n√©ration naturelle"},
    {"name": "Algues marines", "desc": "Biomasse d'algues transform√©e en mousse", "impact": "Absorption CO2 marine"},
    {"name": "Fibre d'eucalyptus", "desc": "Tencel issu de for√™ts g√©r√©es durablement", "impact": "95% d'eau recycl√©e"}
]

# Templates de descriptions par collection
DESCRIPTION_TEMPLATES = {
    "origin": [
        "Incarnation parfaite de l'√©l√©gance minimaliste, cette sneaker TERRA Origin allie design intemporel et conscience environnementale. Chaque d√©tail a √©t√© pens√© pour cr√©er une chaussure qui traverse les saisons sans jamais se d√©moder.",
        "L'essence du style urbain responsable dans une silhouette √©pur√©e. Cette cr√©ation TERRA Origin privil√©gie la qualit√© des mat√©riaux et la durabilit√©, pour un look sophistiqu√© qui respecte la plan√®te.",
        "Design authentique et mat√©riaux nobles se rencontrent dans cette sneaker TERRA Origin. Un choix √©vident pour ceux qui recherchent l'excellence sans compromis sur leurs valeurs environnementales."
    ],
    "move": [
        "Con√ßue pour l'action, cette sneaker TERRA Move combine performance technique et style urbain. Chaque innovation int√©gr√©e vous accompagne dans vos mouvements quotidiens avec fluidit√© et conscience.",
        "L'alliance parfaite entre dynamisme et responsabilit√©. Cette TERRA Move repousse les limites de la performance tout en respectant les codes du style urbain contemporain.",
        "Mouvement, √©nergie et durabilit√© s'unissent dans cette cr√©ation TERRA Move. Une chaussure pens√©e pour ceux qui vivent pleinement tout en pr√©servant l'avenir."
    ],
    "limited": [
        "√âdition exclusive qui raconte une histoire unique. Cette TERRA Limited est le fruit d'une collaboration artistique et d'innovations mat√©riaux, cr√©ant une pi√®ce d'exception pour les connaisseurs.",
        "Cr√©ativit√© et engagement se rencontrent dans cette √©dition limit√©e TERRA. Chaque paire est une ≈ìuvre d'art portable qui affirme votre style tout en soutenant l'innovation durable.",
        "Exclusivit√© et conscience environnementale dans une cr√©ation TERRA Limited. Une sneaker rare qui c√©l√®bre l'artisanat responsable et l'innovation √©coresponsable."
    ]
}

class FinalImporter:
    def __init__(self):
        self.session = requests.Session()
        self.auth_token = None
        self.available_images = self.scan_placeholder_images()

    def scan_placeholder_images(self) -> List[str]:
        """Scanner les images placeholder disponibles"""
        if not os.path.exists(PLACEHOLDER_DIR):
            print(f"‚ö†Ô∏è Dossier {PLACEHOLDER_DIR} non trouv√©. Cr√©ez d'abord les placeholders.")
            return []

        images = glob.glob(f"{PLACEHOLDER_DIR}/*.jpg")
        print(f"üìÅ {len(images)} images placeholder trouv√©es")
        return images

    def authenticate_payload(self):
        """S'authentifier avec Payload CMS"""
        try:
            response = self.session.post(
                f"{PAYLOAD_API_URL}/users/login",
                json={"email": PAYLOAD_EMAIL, "password": PAYLOAD_PASSWORD}
            )
            if response.status_code == 200:
                self.auth_token = response.json().get("token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                print("‚úÖ Authentification Payload r√©ussie")
                return True
            else:
                print(f"‚ùå Erreur authentification: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Erreur connexion: {e}")
            return False

    def upload_image_to_payload(self, image_path: str, alt_text: str) -> Dict:
        """Upload une image vers Payload CMS"""
        try:
            with open(image_path, 'rb') as f:
                files = {'file': (os.path.basename(image_path), f, 'image/jpeg')}
                data = {'alt': alt_text}

                response = self.session.post(
                    f"{PAYLOAD_API_URL}/media",
                    files=files,
                    data=data
                )

                if response.status_code == 201:
                    result = response.json()
                    print(f"   üì∏ Image upload√©e: {result.get('filename', 'unknown')}")
                    return result
                else:
                    print(f"   ‚ùå Erreur upload: {response.status_code}")
                    return None
        except Exception as e:
            print(f"   ‚ùå Erreur upload: {e}")
            return None

    def generate_rich_description(self, product_name: str, collection: str, materials: List[Dict]) -> List[Dict]:
        """G√©n√©rer une description riche et d√©taill√©e"""

        # Template de base selon la collection
        templates = DESCRIPTION_TEMPLATES.get(collection, DESCRIPTION_TEMPLATES["origin"])
        base_desc = random.choice(templates)

        # Construire la description structur√©e
        description = [
            {
                "children": [
                    {"text": base_desc}
                ]
            },
            {
                "children": [
                    {"text": ""}  # Ligne vide
                ]
            },
            {
                "children": [
                    {"text": "üå± Mat√©riaux √©coresponsables", "bold": True}
                ]
            }
        ]

        # Ajouter les mat√©riaux avec d√©tails
        for mat in materials[:2]:  # Limiter √† 2 pour la lisibilit√©
            description.append({
                "children": [
                    {"text": f"‚Ä¢ {mat['name']} : {mat['desc']} ({mat['impact']})"}
                ]
            })

        # Section caract√©ristiques techniques
        description.extend([
            {
                "children": [
                    {"text": ""}
                ]
            },
            {
                "children": [
                    {"text": "‚ö° Caract√©ristiques techniques", "bold": True}
                ]
            },
            {
                "children": [
                    {"text": "‚Ä¢ Semelle ext√©rieure : Caoutchouc recycl√© haute adh√©rence"}
                ]
            },
            {
                "children": [
                    {"text": "‚Ä¢ Semelle interm√©diaire : Mousse bio-sourc√©e pour l'amorti"}
                ]
            },
            {
                "children": [
                    {"text": "‚Ä¢ Doublure : Textile recycl√© respirant et antibact√©rien"}
                ]
            },
            {
                "children": [
                    {"text": "‚Ä¢ Fabrication : Europe, dans le respect des standards sociaux"}
                ]
            }
        ])

        # Section engagement TERRA
        description.extend([
            {
                "children": [
                    {"text": ""}
                ]
            },
            {
                "children": [
                    {"text": "üåç Engagement TERRA", "bold": True}
                ]
            },
            {
                "children": [
                    {"text": "‚Ä¢ 3 arbres plant√©s pour chaque paire vendue"}
                ]
            },
            {
                "children": [
                    {"text": "‚Ä¢ Emballage 100% recycl√© et recyclable"}
                ]
            },
            {
                "children": [
                    {"text": "‚Ä¢ Programme de reprise et recyclage des anciennes paires"}
                ]
            }
        ])

        return description

    def create_complete_product(self, index: int) -> Dict:
        """Cr√©er un produit complet avec image et description"""

        # Donn√©es de marques avec caract√©ristiques r√©alistes
        brands = [
            {"name": "Nike", "eco_range": (7.0, 8.5), "price_range": (120, 200)},
            {"name": "Adidas", "eco_range": (7.5, 8.5), "price_range": (110, 190)},
            {"name": "Veja", "eco_range": (8.5, 9.5), "price_range": (100, 150)},
            {"name": "Allbirds", "eco_range": (8.0, 9.0), "price_range": (90, 130)},
            {"name": "New Balance", "eco_range": (7.0, 8.0), "price_range": (100, 160)},
            {"name": "Puma", "eco_range": (7.0, 8.0), "price_range": (80, 140)},
        ]

        models = [
            "Court Sustainable", "Runner Bio", "Classic Natural", "Urban Green",
            "Move Recycled", "Origin Pure", "Limited Earth", "Air Max Eco"
        ]

        # S√©lections al√©atoires
        brand_info = random.choice(brands)
        model = random.choice(models)
        collection = random.choice(["origin", "move", "limited"])

        # Prix et √©co-score coh√©rents avec la marque
        price = random.randint(*brand_info["price_range"])
        eco_score = round(random.uniform(*brand_info["eco_range"]), 1)

        # Mat√©riaux (2-3 par produit)
        selected_materials = random.sample(ECO_MATERIALS, random.randint(2, 3))

        # Couleurs TERRA
        terra_colors = [
            {"name": "Stone White", "value": "#F5F5F0"},
            {"name": "Urban Black", "value": "#1A1A1A"},
            {"name": "Terra Green", "value": "#2D5A27"},
            {"name": "Clay Orange", "value": "#D4725B"},
            {"name": "Sage Green", "value": "#9CAF88"},
        ]

        color = random.choice(terra_colors)
        colors = [{
            "name": color["name"],
            "value": color["value"],
            "images": []
        }]

        # Tailles avec stock r√©aliste
        sizes = []
        available_sizes = ["36", "37", "38", "39", "40", "41", "42", "43", "44", "45"]
        for size in random.sample(available_sizes, random.randint(6, 8)):
            stock = random.randint(0, 80)
            reserved = random.randint(0, min(3, stock)) if stock > 0 else 0
            sizes.append({
                "size": size,
                "stock": stock,
                "reservedStock": reserved,
                "availableStock": stock - reserved,
                "lowStockThreshold": 5,
                "isLowStock": stock <= 10,
                "isOutOfStock": stock == 0
            })

        # Description riche
        rich_description = self.generate_rich_description(
            f"{brand_info['name']} {model}",
            collection,
            selected_materials
        )

        # S√©lectionner une image placeholder
        placeholder_image = None
        if self.available_images:
            placeholder_image = random.choice(self.available_images)

        return {
            "title": f"TERRA {brand_info['name']} {model}",
            "slug": f"terra-{brand_info['name'].lower()}-{model.lower().replace(' ', '-')}-{index}",
            "collection": collection,
            "price": price,
            "shortDescription": f"{brand_info['name']} {model} avec {selected_materials[0]['name']} - {selected_materials[0]['impact']}",
            "description": rich_description,
            "colors": colors,
            "sizes": sizes,
            "ecoScore": eco_score,
            "isFeatured": random.random() < 0.15,  # 15% featured
            "isNewArrival": random.random() < 0.20,  # 20% nouveaut√©s
            "_status": "published",
            "placeholder_image": placeholder_image,
            "materials": [mat["name"] for mat in selected_materials]
        }

    def create_product_with_everything(self, product_data: Dict) -> Dict:
        """Cr√©er un produit avec image et description dans Payload"""
        try:
            # Upload de l'image placeholder si disponible
            if product_data.get('placeholder_image'):
                alt_text = f"{product_data['title']} - Sneaker √©coresponsable TERRA"
                image_doc = self.upload_image_to_payload(product_data['placeholder_image'], alt_text)
                if image_doc and 'id' in image_doc:
                    product_data["images"] = [{"image": image_doc["id"], "alt": alt_text}]

            # Nettoyer les donn√©es avant envoi
            product_data.pop('placeholder_image', None)
            product_data.pop('materials', None)

            # Cr√©er le produit
            response = self.session.post(
                f"{PAYLOAD_API_URL}/products",
                json=product_data
            )

            if response.status_code == 201:
                result = response.json()
                return result
            else:
                print(f"   ‚ùå Erreur API: {response.status_code}")
                print(f"   üìÑ R√©ponse: {response.text[:200]}")
                return None

        except Exception as e:
            print(f"   ‚ùå Exception: {e}")
            return None

    def final_import(self, total_products: int = 30):
        """Import final avec tout : images + descriptions"""
        print(f"üöÄ TERRA Final Import - {total_products} produits complets")
        print("=" * 60)

        if not self.available_images:
            print("‚ùå Aucune image placeholder trouv√©e. Lancez d'abord create_placeholder_images.py")
            return False

        if not self.authenticate_payload():
            return False

        success_count = 0
        failed_count = 0

        for i in range(1, total_products + 1):
            try:
                print(f"\nüì¶ Produit {i}/{total_products}")

                # G√©n√©rer produit complet
                product_data = self.create_complete_product(i)
                print(f"   üè∑Ô∏è  {product_data['title']}")
                print(f"   üí∞ {product_data['price']}‚Ç¨ - √âco-score: {product_data['ecoScore']}")
                print(f"   üå± Mat√©riaux: {', '.join(product_data['materials'])}")
                print(f"   üì¶ Collection: {product_data['collection'].title()}")

                # Cr√©er dans Payload
                result = self.create_product_with_everything(product_data)

                if result:
                    success_count += 1
                    print(f"   ‚úÖ Cr√©√© avec succ√®s !")
                else:
                    failed_count += 1
                    print(f"   ‚ùå √âchec")

                # Rate limiting
                time.sleep(0.5)

            except Exception as e:
                print(f"‚ùå Erreur produit {i}: {e}")
                failed_count += 1
                continue

        print(f"\nüéâ Import termin√©!")
        print(f"‚úÖ Succ√®s: {success_count}")
        print(f"‚ùå √âchecs: {failed_count}")
        print(f"üìä Taux: {(success_count/total_products)*100:.1f}%")
        print(f"\nüåê Voir les r√©sultats: http://localhost:3000/admin/collections/products")

        return True

def main():
    print("üå± TERRA Final Importer v3.0")
    print("Images styl√©es + Descriptions riches")
    print("=" * 50)

    # Param√®tres
    total = input("Nombre de produits complets (d√©faut: 30): ").strip()
    total = int(total) if total.isdigit() else 30

    if total > 100:
        print("‚ö†Ô∏è Limitez √† 100 pour √©viter la surcharge")
        total = 100

    confirm = input(f"Cr√©er {total} produits avec images et descriptions? (y/N): ").strip().lower()
    if confirm != 'y':
        print("‚ùå Annul√©")
        return

    # Lancer l'import final
    importer = FinalImporter()
    importer.final_import(total)

if __name__ == "__main__":
    main()
