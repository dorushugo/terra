#!/usr/bin/env python3
"""
Script pour des images coh√©rentes avec crit√®res visuels stricts
Utilise des filtres Unsplash pour une identit√© visuelle uniforme
"""

import os
import io
import sys
import time
import random
import requests
from typing import Dict, List, Optional
from pathlib import Path

def load_env_file():
    env_path = Path(__file__).parent.parent / '.env'
    if env_path.exists():
        with open(env_path, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    value = value.strip('"\'')
                    os.environ[key] = value

load_env_file()

PAYLOAD_API_URL = os.environ.get('PAYLOAD_API_URL', 'http://localhost:3000/api')
ADMIN_EMAIL = os.environ.get('PAYLOAD_EMAIL', 'admin@terra-sneakers.com')
ADMIN_PASSWORD = os.environ.get('PAYLOAD_PASSWORD', 'TerraAdmin2024!')
UNSPLASH_ACCESS_KEY = os.environ.get('UNSPLASH_ACCESS_KEY')

# Crit√®res visuels stricts pour TERRA
VISUAL_CRITERIA = {
    'colors': ['white', 'black', 'minimal'],  # Couleurs coh√©rentes
    'orientation': 'squarish',                # Format carr√©
    'styles': [                              # Styles photographiques coh√©rents
        'product photography',
        'studio photography',
        'white background',
        'clean minimal',
        'professional product'
    ]
}

# Mots-cl√©s sp√©cifiques pour chaque type de chaussure
SHOE_CATEGORIES = {
    'sneakers': ['white sneakers studio', 'minimal sneakers photography', 'clean sneakers white background'],
    'running': ['running shoes product photo', 'athletic shoes studio', 'sport shoes white background'],
    'casual': ['casual shoes minimal', 'lifestyle sneakers clean', 'everyday shoes studio'],
    'basketball': ['basketball shoes product', 'high top sneakers studio', 'sport shoes professional'],
    'tennis': ['tennis shoes white background', 'court shoes minimal', 'athletic footwear studio']
}

class CuratedUnsplashProvider:
    def __init__(self, access_key: str):
        self.access_key = access_key
        self.session = requests.Session()
        self.session.headers.update({
            'Authorization': f'Client-ID {access_key}',
            'Accept-Version': 'v1'
        })

    def get_curated_images(self, count: int) -> List[Dict]:
        """R√©cup√®re des images avec crit√®res visuels stricts"""
        curated_photos = []

        # Utiliser des recherches tr√®s sp√©cifiques
        specific_queries = [
            'white sneakers studio photography',
            'minimal shoes white background',
            'clean sneakers product photo',
            'athletic shoes professional photography',
            'running shoes studio shot',
            'casual sneakers minimal style',
            'sport shoes white backdrop',
            'footwear product photography',
            'shoes isolated white background',
            'sneakers commercial photography'
        ]

        for query in specific_queries:
            if len(curated_photos) >= count:
                break

            for page in range(1, 4):  # 3 pages max par requ√™te
                if len(curated_photos) >= count:
                    break

                params = {
                    'query': query,
                    'per_page': 20,
                    'page': page,
                    'orientation': 'squarish',
                    'color': 'white',  # Privil√©gier les fonds blancs
                    'order_by': 'relevant'
                }

                r = self.session.get('https://api.unsplash.com/search/photos', params=params)
                if r.status_code != 200:
                    continue

                photos = r.json().get('results', [])

                # Filtrer selon nos crit√®res visuels
                for photo in photos:
                    if len(curated_photos) >= count:
                        break

                    if self._meets_visual_criteria(photo):
                        curated_photos.append(photo)
                        print(f'‚úÖ Image s√©lectionn√©e: {photo.get("alt_description", "")[:50]}...')

                time.sleep(1)  # Respecter les limites

        return curated_photos

    def _meets_visual_criteria(self, photo: Dict) -> bool:
        """V√©rifie si une image respecte nos crit√®res visuels"""
        description = (photo.get('description', '') or '').lower()
        alt_desc = (photo.get('alt_description', '') or '').lower()
        tags = [tag['title'].lower() for tag in photo.get('tags', [])]

        combined_text = f"{description} {alt_desc} {' '.join(tags)}"

        # Crit√®res positifs (on veut √ßa)
        positive_keywords = [
            'white background', 'studio', 'product', 'minimal', 'clean',
            'isolated', 'professional', 'commercial', 'photography'
        ]

        # Crit√®res n√©gatifs (on √©vite √ßa)
        negative_keywords = [
            'person', 'people', 'wearing', 'feet', 'legs', 'model',
            'street', 'outdoor', 'lifestyle', 'fashion', 'portrait'
        ]

        # V√©rifier les crit√®res positifs
        has_positive = any(keyword in combined_text for keyword in positive_keywords)

        # V√©rifier les crit√®res n√©gatifs
        has_negative = any(keyword in combined_text for keyword in negative_keywords)

        # L'image doit avoir des crit√®res positifs ET ne pas avoir de n√©gatifs
        return has_positive and not has_negative

    def download_image(self, photo: Dict) -> Optional[bytes]:
        """T√©l√©charge une image depuis Unsplash"""
        url = photo['urls'].get('regular') or photo['urls'].get('small')
        if not url:
            return None

        try:
            # D√©clencher le t√©l√©chargement (requis par l'API Unsplash)
            download_url = photo['links'].get('download_location')
            if download_url:
                self.session.get(download_url)

            # T√©l√©charger l'image
            r = self.session.get(url, timeout=30)
            if r.status_code == 200:
                return r.content
        except Exception as e:
            print(f'‚ùå Erreur t√©l√©chargement: {e}')
        return None

class PayloadClient:
    def __init__(self):
        self.session = requests.Session()
        self.token = None

    def login(self) -> bool:
        r = self.session.post(f"{PAYLOAD_API_URL}/users/login", json={
            'email': ADMIN_EMAIL, 'password': ADMIN_PASSWORD,
        })
        if r.status_code == 200:
            self.token = r.json().get('token')
            self.session.headers.update({'Authorization': f'Bearer {self.token}'})
            return True
        return False

    def list_products_needing_better_images(self, limit: int = 200) -> List[Dict]:
        """Liste tous les produits (pour remplacer les images existantes)"""
        r = self.session.get(f"{PAYLOAD_API_URL}/products", params={
            'limit': limit, 'depth': 1, 'sort': '-createdAt'
        })
        if r.status_code != 200:
            return []
        return r.json().get('docs', [])

    def replace_product_image(self, product_id: str, image_bytes: bytes, filename: str, alt: str) -> bool:
        """Remplace l'image d'un produit"""
        # Upload nouvelle image
        files = {'file': (filename, io.BytesIO(image_bytes), 'image/jpeg')}
        data = {'alt': alt}
        r = self.session.post(f"{PAYLOAD_API_URL}/media", files=files, data=data)
        if r.status_code != 201:
            return False

        result = r.json()
        media_id = result.get('id') or (result.get('doc') or {}).get('id')
        if not media_id:
            return False

        # Remplacer l'image du produit
        r = self.session.patch(f"{PAYLOAD_API_URL}/products/{product_id}",
                              json={'images': [{'image': int(media_id), 'alt': alt}]})
        return r.status_code == 200

def main():
    print('üé® Curated Images - Images coh√©rentes pour TERRA')
    print('üìê Crit√®res: fond blanc, studio, produit, minimal, professionnel')

    if not UNSPLASH_ACCESS_KEY:
        print('‚ùå Cl√© Unsplash requise pour des images de qualit√©')
        sys.exit(1)

    # Connexion
    payload = PayloadClient()
    if not payload.login():
        print('‚ùå Authentification √©chou√©e')
        sys.exit(1)

    unsplash = CuratedUnsplashProvider(UNSPLASH_ACCESS_KEY)

    # Param√®tres
    replace_all = input('Remplacer TOUTES les images existantes ? (y/N): ').lower().strip() == 'y'
    limit_str = input('Nombre de produits √† traiter (d√©faut 50): ').strip()
    limit = int(limit_str) if limit_str.isdigit() else 50

    # R√©cup√©rer les produits
    products = payload.list_products_needing_better_images(limit)
    print(f'üì¶ {len(products)} produits √† traiter')

    # R√©cup√©rer des images cur√©es
    print('üîç Recherche d\'images avec crit√®res visuels stricts...')
    curated_photos = unsplash.get_curated_images(len(products))

    if not curated_photos:
        print('‚ùå Aucune image trouv√©e avec nos crit√®res')
        sys.exit(1)

    print(f'üì∏ {len(curated_photos)} images cur√©es trouv√©es')

    # M√©langer pour √©viter la r√©p√©tition
    random.shuffle(curated_photos)

    # Traiter les produits
    success = 0
    for i, product in enumerate(products):
        if i >= len(curated_photos):
            print(f'‚ùå Plus d\'images cur√©es pour {product.get("title")}')
            continue

        title = product.get('title') or f'Produit {i+1}'
        print(f'\nüì∏ {i+1}/{len(products)} - {title}')

        photo = curated_photos[i]

        # T√©l√©charger l'image
        img_bytes = unsplash.download_image(photo)
        if not img_bytes:
            print('‚ùå T√©l√©chargement √©chec')
            continue

        # Remplacer l'image
        filename = f"curated_{product.get('id', i)}_{photo['id']}.jpg"
        alt_text = f"{title} - {photo.get('alt_description', 'chaussure professionnelle')}"

        if payload.replace_product_image(str(product.get('id')), img_bytes, filename, alt_text):
            success += 1
            photographer = photo['user']['name']
            print(f'‚úÖ Image remplac√©e (Photo: {photographer})')
        else:
            print('‚ùå √âchec remplacement')

        # Pause
        time.sleep(0.5)

    print(f'\nüéâ Termin√©!')
    print(f'‚úÖ Images remplac√©es: {success}/{len(products)}')
    print(f'üìä Taux de r√©ussite: {success/len(products)*100:.1f}%')
    print('\nüé® Identit√© visuelle plus coh√©rente appliqu√©e!')

if __name__ == '__main__':
    main()
